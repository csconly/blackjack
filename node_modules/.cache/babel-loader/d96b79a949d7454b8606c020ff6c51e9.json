{"ast":null,"code":"var _jsxFileName = \"/Users/claytonconly/Documents/Projects/blackjack/src/components/Table.js\";\nimport React, { Component } from 'react';\nimport PlayerCommands from './PlayerCommands';\nimport '../styles/blackjack.css';\nimport * as Constants from '../js/constants';\nimport PlayerHand from './PlayerHand';\nimport DealerHand from './DealerHand';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bankRoll: parseInt(this.props.bankRoll),\n      deckCount: parseInt(this.props.decks),\n      deck: this.buildGameDeck(parseInt(this.props.decks)),\n      bet: 0,\n      inHand: false,\n      dealerMessage: \"Place your bet!\",\n      dHand: [],\n      pHand: [],\n      playerTurn: false\n    };\n    this.beginHand = this.beginHand.bind(this);\n    console.log(this.state.deck);\n  } // I am using the Fisher-Yates algorithm \n  // While reading online I discovered this algorithm is best for shuffling an array\n\n\n  shuffle(deck) {\n    let currentIndex = deck.length;\n    let temporaryValue, randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = deck[currentIndex];\n      deck[currentIndex] = deck[randomIndex];\n      deck[randomIndex] = temporaryValue;\n    }\n\n    return deck;\n  }\n\n  buildGameDeck(count) {\n    let gameDeck = [];\n\n    for (let i = 0; i < Constants.deck.length; i++) {\n      for (let j = 1; j <= count; j++) {\n        gameDeck.push(Constants.deck[i]);\n      }\n    }\n\n    return this.shuffle(gameDeck);\n  }\n\n  beginHand(newBet, warning = null) {\n    if (warning) {\n      this.setState({\n        dealerMessage: warning\n      });\n    } else {\n      this.setState({\n        inHand: true,\n        bet: parseInt(newBet)\n      }, function () {\n        for (let i = 1; i <= 4; i++) {\n          if (i == 1 || i == 3) {\n            this.hit(\"player\");\n          } else {\n            this.hit(\"dealer\");\n          }\n        }\n      });\n    }\n  }\n\n  hit(destination) {\n    let cards = [...this.state.deck];\n    console.log(cards[0]);\n    console.log(this.state);\n\n    if (destination === 'player') {\n      let pHand = [...this.state.pHand];\n      pHand.push(cards[0]);\n      this.setState({\n        pHand: pHand,\n        deck: this.state.deck.splice(0, 1)\n      });\n    } else {\n      this.setState({\n        dHand: this.state.dHand.push(cards[0]),\n        deck: this.state.deck.splice(0, 1)\n      });\n    }\n\n    console.log(this.state.deck);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"appBackground\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dealerArea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DealerHand, {\n      dHand: this.state.dHand,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dialogue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }\n    }, \"Dealer Dialogue:\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    }, this.state.dealerMessage))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"gamePrint\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }\n    }, \"Blackjack pays 3 to 2\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }\n    }, \"Insurance Pays 2 to 1\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }\n    }, \"Dealer Must Hit Soft 17\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(PlayerHand, {\n      pHand: this.state.pHand,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        float: 'left'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        textAlign: 'left',\n        marginLeft: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }\n    }, \"Bank\"), /*#__PURE__*/React.createElement(\"h2\", {\n      style: {\n        textAlign: 'left',\n        marginLeft: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, \"$\", this.state.bankRoll.toFixed(2))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        float: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        textAlign: 'left',\n        marginRight: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }, \"Bet\"), /*#__PURE__*/React.createElement(\"h2\", {\n      style: {\n        textAlign: 'left',\n        marginRight: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }\n    }, \"$\", this.state.bet.toFixed(2)))), /*#__PURE__*/React.createElement(PlayerCommands, {\n      beginHand: this.beginHand,\n      inHand: this.state.inHand,\n      playerTurn: this.state.playerTurn,\n      pHand: this.state.pHand,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Table;","map":{"version":3,"sources":["/Users/claytonconly/Documents/Projects/blackjack/src/components/Table.js"],"names":["React","Component","PlayerCommands","Constants","PlayerHand","DealerHand","Table","constructor","props","state","bankRoll","parseInt","deckCount","decks","deck","buildGameDeck","bet","inHand","dealerMessage","dHand","pHand","playerTurn","beginHand","bind","console","log","shuffle","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","count","gameDeck","i","j","push","newBet","warning","setState","hit","destination","cards","splice","render","textAlign","float","marginLeft","toFixed","marginRight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PlayerCommands from './PlayerCommands'\nimport '../styles/blackjack.css';\nimport * as Constants from '../js/constants';\nimport PlayerHand from './PlayerHand';\nimport DealerHand from './DealerHand';\n\nclass Table extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bankRoll: parseInt(this.props.bankRoll),\n            deckCount: parseInt(this.props.decks),\n            deck: this.buildGameDeck(parseInt(this.props.decks)),\n            bet: 0,\n            inHand: false,\n            dealerMessage: \"Place your bet!\",\n            dHand: [],\n            pHand: [],\n            playerTurn: false\n        }\n        this.beginHand = this.beginHand.bind(this);\n        console.log(this.state.deck);\n    }\n    // I am using the Fisher-Yates algorithm \n    // While reading online I discovered this algorithm is best for shuffling an array\n    shuffle(deck) {\n        let currentIndex = deck.length;\n        let temporaryValue, randomIndex;\n      \n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex -= 1;\n      \n          // And swap it with the current element.\n          temporaryValue = deck[currentIndex];\n          deck[currentIndex] = deck[randomIndex];\n          deck[randomIndex] = temporaryValue;\n        }\n      \n        return deck;\n      }\n\n    buildGameDeck(count) {\n        let gameDeck = [];\n\n        for (let i = 0; i < Constants.deck.length; i++) {\n            for (let j = 1; j <= count; j++) {\n                gameDeck.push(Constants.deck[i]);\n            }\n        }\n\n        return this.shuffle(gameDeck);\n    }\n\n    beginHand(newBet, warning = null) {\n        if (warning) {\n            this.setState({dealerMessage: warning});\n        } else {\n            this.setState({\n                inHand: true, \n                bet: parseInt(newBet)\n            }, function() {\n                for (let i = 1; i <= 4; i++) {\n                    if (i == 1 || i == 3) {\n                        this.hit(\"player\");\n                    } else {\n                        this.hit(\"dealer\");\n                    }\n                }\n            });\n        }\n    }\n\n    hit(destination) {\n        let cards = [...this.state.deck];\n        console.log(cards[0]);\n        console.log(this.state);\n        if (destination === 'player') {\n            let pHand = [...this.state.pHand];\n            pHand.push(cards[0]);\n            this.setState({pHand: pHand, deck: this.state.deck.splice(0, 1)});\n        } else {\n            this.setState({dHand: this.state.dHand.push(cards[0]), deck: this.state.deck.splice(0, 1)});\n        }\n        console.log(this.state.deck)\n    }\n\n    render() {\n        return(\n            <div className=\"appBackground\">\n                <div className=\"table\">\n                    <div className=\"dealerArea\">\n                        <DealerHand \n                            dHand={this.state.dHand} \n                        />\n                        <div className=\"dialogue\">\n                            <h1 style={{textAlign: 'center'}}>Dealer Dialogue:</h1>\n                            <p>{this.state.dealerMessage}</p>\n                        </div>\n                    </div>\n                    <div className=\"gamePrint\">\n                        <p>Blackjack pays 3 to 2</p>\n                        <p>Insurance Pays 2 to 1</p>\n                        <p>Dealer Must Hit Soft 17</p>\n                    </div>\n                    <div>\n                        <PlayerHand \n                            pHand={this.state.pHand} \n                        />\n                    </div>\n                </div>\n                <div className=\"bank\">\n                    <div style={{float: 'left'}}> \n                        <h1 style={{textAlign: 'left', marginLeft: '10px'}}>Bank</h1>\n                        <h2 style={{textAlign: 'left', marginLeft: '10px'}}>${this.state.bankRoll.toFixed(2)}</h2>\n                    </div>\n                    <div style={{float: 'right'}}> \n                        <h1 style={{textAlign: 'left', marginRight: '10px'}}>Bet</h1>\n                        <h2 style={{textAlign: 'left', marginRight: '10px'}}>${this.state.bet.toFixed(2)}</h2>\n                    </div>\n                </div>\n                <PlayerCommands \n                    beginHand={this.beginHand}\n                    inHand={this.state.inHand}\n                    playerTurn={this.state.playerTurn}\n                    pHand={this.state.pHand}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Table"]},"metadata":{},"sourceType":"module"}